/* Решение: В этой задаче мы используем коллекцию Map для хранения уникальных элементов в качестве ключей и их счетчиков в качестве значений. 
Мы перебираем элементы массива и для каждого элемента проверяем, есть ли он уже в Map. Если элемент уже присутствует в Map, мы увеличиваем его счетчик на 1. 
Если элемент отсутствует, мы добавляем его в Map со значением 1. В конце возвращаем Map с результатами подсчета.
*/
function countOccurrences(arr) {
    const countMap = new Map();
    
    arr.forEach(item => {
      if (countMap.has(item)) {
        countMap.set(item, countMap.get(item) + 1);
      } else {
        countMap.set(item, 1);
      }
    });
    
    return countMap;
  }
  
  const arr = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4];
  const occurrences = countOccurrences(arr);
  
  console.log(occurrences);

  /* Решение: В этой задаче мы используем коллекцию Set, которая автоматически удаляет дубликаты элементов.
   Мы создаем новый Set, передавая в него исходный массив. Затем мы преобразуем Set обратно в массив, используя оператор расширения ....
   Это создает новый массив, содержащий только уникальные элементы, поскольку Set автоматически удаляет повторяющиеся значения.
  */
  function removeDuplicates(arr) {
    return [...new Set(arr)];
  }
  
  const arr1 = [1, 2, 3, 2, 1, 3, 3, 4, 5, 4, 4];
  const uniqueArr = removeDuplicates(arr1);
  
  console.log(uniqueArr);


/*
Решение: В этой задаче мы используем коллекцию Set, чтобы проверить уникальность символов в строке. Мы создаем новый Set, передавая в него строку. 
Поскольку Set не может содержать дубликаты, его размер будет равен количеству уникальных символов в строке. Мы сравниваем размер Set с длиной исходной строки. 
Если они равны, это означает, что каждый символ встречается только один раз, и мы возвращаем true. В противном случае, если размер Set меньше длины строки, это означает,
 что в строке есть повторяющиеся символы, 
и мы возвращаем false.
*/  
function hasUniqueCharacters(str) {
    const charSet = new Set(str);
    return str.length === charSet.size;
  }
  
  const str1 = "abcdefg";
  console.log(hasUniqueCharacters(str1)); // true
  
  const str2 = "hello";
  console.log(hasUniqueCharacters(str2)); // false
  

  /*В этой задаче мы хотим посчитать количество уникальных слов в предложении. Для этого мы используем коллекцию Set, которая автоматически удаляет дубликаты элементов.
Сначала мы приводим все слова в предложении к нижнему регистру, чтобы учесть различия в написании слов. Затем мы разбиваем предложение на массив слов с помощью метода split(), 
разделяя его по пробелам.
Далее мы создаем новый Set из массива слов, чтобы удалить повторяющиеся слова. Обратите внимание, что мы используем метод size у Set, чтобы получить количество уникальных элементов в нем.
Наконец, мы возвращаем размер Set, который представляет количество уникальных слов в предложении.
  */

  function countUniqueWords(sentence) {
    const words = sentence.toLowerCase().split(" ");
    const uniqueWords = new Set(words);
    return uniqueWords.size;
  }
  
  const sentence = "The cat and the dog sat on the mat.";
  const uniqueWordCount = countUniqueWords(sentence);
  
  console.log(uniqueWordCount);
  